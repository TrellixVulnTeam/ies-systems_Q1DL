{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/ultron/Documents/ies-systems/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { r as registerInstance, e as createEvent, c as writeTask, f as readTask, h, i as getElement, H as Host } from './index-7a8b7a1c.js';\nimport { b as getIonMode, c as config } from './ionic-global-63a97a32.js';\nimport { s as sanitizeDOMString } from './index-9e3fe806.js';\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\nconst InfiniteScroll = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    this.thrPx = 0;\n    this.thrPc = 0;\n    this.didFire = false;\n    this.isBusy = false;\n    this.isLoading = false;\n    /**\r\n     * The threshold distance from the bottom\r\n     * of the content to call the `infinite` output event when scrolled.\r\n     * The threshold value can be either a percent, or\r\n     * in pixels. For example, use the value of `10%` for the `infinite`\r\n     * output event to get called when the user has scrolled 10%\r\n     * from the bottom of the page. Use the value `100px` when the\r\n     * scroll is within 100 pixels from the bottom of the page.\r\n     */\n\n    this.threshold = '15%';\n    /**\r\n     * If `true`, the infinite scroll will be hidden and scroll event listeners\r\n     * will be removed.\r\n     *\r\n     * Set this to true to disable the infinite scroll from actively\r\n     * trying to receive new data while scrolling. This is useful\r\n     * when it is known that there is no more data that can be added, and\r\n     * the infinite scroll is no longer needed.\r\n     */\n\n    this.disabled = false;\n    /**\r\n     * The position of the infinite scroll element.\r\n     * The value can be either `top` or `bottom`.\r\n     */\n\n    this.position = 'bottom';\n\n    this.onScroll = () => {\n      const scrollEl = this.scrollEl;\n\n      if (!scrollEl || !this.canStart()) {\n        return 1;\n      }\n\n      const infiniteHeight = this.el.offsetHeight;\n\n      if (infiniteHeight === 0) {\n        // if there is no height of this element then do nothing\n        return 2;\n      }\n\n      const scrollTop = scrollEl.scrollTop;\n      const scrollHeight = scrollEl.scrollHeight;\n      const height = scrollEl.offsetHeight;\n      const threshold = this.thrPc !== 0 ? height * this.thrPc : this.thrPx;\n      const distanceFromInfinite = this.position === 'bottom' ? scrollHeight - infiniteHeight - scrollTop - threshold - height : scrollTop - infiniteHeight - threshold;\n\n      if (distanceFromInfinite < 0) {\n        if (!this.didFire) {\n          this.isLoading = true;\n          this.didFire = true;\n          this.ionInfinite.emit();\n          return 3;\n        }\n      } else {\n        this.didFire = false;\n      }\n\n      return 4;\n    };\n  }\n\n  thresholdChanged() {\n    const val = this.threshold;\n\n    if (val.lastIndexOf('%') > -1) {\n      this.thrPx = 0;\n      this.thrPc = parseFloat(val) / 100;\n    } else {\n      this.thrPx = parseFloat(val);\n      this.thrPc = 0;\n    }\n  }\n\n  disabledChanged() {\n    const disabled = this.disabled;\n\n    if (disabled) {\n      this.isLoading = false;\n      this.isBusy = false;\n    }\n\n    this.enableScrollEvents(!disabled);\n  }\n\n  connectedCallback() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const contentEl = _this.el.closest('ion-content');\n\n      if (!contentEl) {\n        console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n        return;\n      }\n\n      _this.scrollEl = yield contentEl.getScrollElement();\n\n      _this.thresholdChanged();\n\n      _this.disabledChanged();\n\n      if (_this.position === 'top') {\n        writeTask(() => {\n          if (_this.scrollEl) {\n            _this.scrollEl.scrollTop = _this.scrollEl.scrollHeight - _this.scrollEl.clientHeight;\n          }\n        });\n      }\n    })();\n  }\n\n  disconnectedCallback() {\n    this.enableScrollEvents(false);\n    this.scrollEl = undefined;\n  }\n  /**\r\n   * Call `complete()` within the `ionInfinite` output event handler when\r\n   * your async operation has completed. For example, the `loading`\r\n   * state is while the app is performing an asynchronous operation,\r\n   * such as receiving more data from an AJAX request to add more items\r\n   * to a data list. Once the data has been received and UI updated, you\r\n   * then call this method to signify that the loading has completed.\r\n   * This method will change the infinite scroll's state from `loading`\r\n   * to `enabled`.\r\n   */\n\n\n  complete() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const scrollEl = _this2.scrollEl;\n\n      if (!_this2.isLoading || !scrollEl) {\n        return;\n      }\n\n      _this2.isLoading = false;\n\n      if (_this2.position === 'top') {\n        /**\r\n         * New content is being added at the top, but the scrollTop position stays the same,\r\n         * which causes a scroll jump visually. This algorithm makes sure to prevent this.\r\n         * (Frame 1)\r\n         *    - complete() is called, but the UI hasn't had time to update yet.\r\n         *    - Save the current content dimensions.\r\n         *    - Wait for the next frame using _dom.read, so the UI will be updated.\r\n         * (Frame 2)\r\n         *    - Read the new content dimensions.\r\n         *    - Calculate the height difference and the new scroll position.\r\n         *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\r\n         * (Still frame 2, if I'm correct)\r\n         *    - Change the scroll position (= visually maintain the scroll position).\r\n         *    - Change the state to re-enable the InfiniteScroll.\r\n         *    - This should be after changing the scroll position, or it could\r\n         *    cause the InfiniteScroll to be triggered again immediately.\r\n         * (Frame 3)\r\n         *    Done.\r\n         */\n        _this2.isBusy = true; // ******** DOM READ ****************\n        // Save the current content dimensions before the UI updates\n\n        const prev = scrollEl.scrollHeight - scrollEl.scrollTop; // ******** DOM READ ****************\n\n        requestAnimationFrame(() => {\n          readTask(() => {\n            // UI has updated, save the new content dimensions\n            const scrollHeight = scrollEl.scrollHeight; // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n\n            const newScrollTop = scrollHeight - prev; // ******** DOM WRITE ****************\n\n            requestAnimationFrame(() => {\n              writeTask(() => {\n                scrollEl.scrollTop = newScrollTop;\n                _this2.isBusy = false;\n              });\n            });\n          });\n        });\n      }\n    })();\n  }\n\n  canStart() {\n    return !this.disabled && !this.isBusy && !!this.scrollEl && !this.isLoading;\n  }\n\n  enableScrollEvents(shouldListen) {\n    if (this.scrollEl) {\n      if (shouldListen) {\n        this.scrollEl.addEventListener('scroll', this.onScroll);\n      } else {\n        this.scrollEl.removeEventListener('scroll', this.onScroll);\n      }\n    }\n  }\n\n  render() {\n    const mode = getIonMode(this);\n    const disabled = this.disabled;\n    return h(Host, {\n      class: {\n        [mode]: true,\n        'infinite-scroll-loading': this.isLoading,\n        'infinite-scroll-enabled': !disabled\n      }\n    });\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"threshold\": [\"thresholdChanged\"],\n      \"disabled\": [\"disabledChanged\"]\n    };\n  }\n\n};\nInfiniteScroll.style = infiniteScrollCss;\nconst infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\nconst infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\nconst InfiniteScrollContent = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n\n  componentDidLoad() {\n    if (this.loadingSpinner === undefined) {\n      const mode = getIonMode(this);\n      this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n    }\n  }\n\n  render() {\n    const mode = getIonMode(this);\n    return h(Host, {\n      class: {\n        [mode]: true,\n        // Used internally for styling\n        [`infinite-scroll-content-${mode}`]: true\n      }\n    }, h(\"div\", {\n      class: \"infinite-loading\"\n    }, this.loadingSpinner && h(\"div\", {\n      class: \"infinite-loading-spinner\"\n    }, h(\"ion-spinner\", {\n      name: this.loadingSpinner\n    })), this.loadingText && h(\"div\", {\n      class: \"infinite-loading-text\",\n      innerHTML: sanitizeDOMString(this.loadingText)\n    })));\n  }\n\n};\nInfiniteScrollContent.style = {\n  ios: infiniteScrollContentIosCss,\n  md: infiniteScrollContentMdCss\n};\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };","map":{"version":3,"sources":["C:/Users/ultron/Documents/ies-systems/node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2.entry.js"],"names":["r","registerInstance","e","createEvent","c","writeTask","f","readTask","h","i","getElement","H","Host","b","getIonMode","config","s","sanitizeDOMString","infiniteScrollCss","InfiniteScroll","constructor","hostRef","ionInfinite","thrPx","thrPc","didFire","isBusy","isLoading","threshold","disabled","position","onScroll","scrollEl","canStart","infiniteHeight","el","offsetHeight","scrollTop","scrollHeight","height","distanceFromInfinite","emit","thresholdChanged","val","lastIndexOf","parseFloat","disabledChanged","enableScrollEvents","connectedCallback","contentEl","closest","console","error","getScrollElement","clientHeight","disconnectedCallback","undefined","complete","prev","requestAnimationFrame","newScrollTop","shouldListen","addEventListener","removeEventListener","render","mode","class","watchers","style","infiniteScrollContentIosCss","infiniteScrollContentMdCss","InfiniteScrollContent","componentDidLoad","loadingSpinner","get","name","loadingText","innerHTML","ios","md","ion_infinite_scroll","ion_infinite_scroll_content"],"mappings":"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","sourcesContent":["import { r as registerInstance, e as createEvent, c as writeTask, f as readTask, h, i as getElement, H as Host } from './index-7a8b7a1c.js';\r\nimport { b as getIonMode, c as config } from './ionic-global-63a97a32.js';\r\nimport { s as sanitizeDOMString } from './index-9e3fe806.js';\r\n\r\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\r\n\r\nconst InfiniteScroll = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\r\n    this.thrPx = 0;\r\n    this.thrPc = 0;\r\n    this.didFire = false;\r\n    this.isBusy = false;\r\n    this.isLoading = false;\r\n    /**\r\n     * The threshold distance from the bottom\r\n     * of the content to call the `infinite` output event when scrolled.\r\n     * The threshold value can be either a percent, or\r\n     * in pixels. For example, use the value of `10%` for the `infinite`\r\n     * output event to get called when the user has scrolled 10%\r\n     * from the bottom of the page. Use the value `100px` when the\r\n     * scroll is within 100 pixels from the bottom of the page.\r\n     */\r\n    this.threshold = '15%';\r\n    /**\r\n     * If `true`, the infinite scroll will be hidden and scroll event listeners\r\n     * will be removed.\r\n     *\r\n     * Set this to true to disable the infinite scroll from actively\r\n     * trying to receive new data while scrolling. This is useful\r\n     * when it is known that there is no more data that can be added, and\r\n     * the infinite scroll is no longer needed.\r\n     */\r\n    this.disabled = false;\r\n    /**\r\n     * The position of the infinite scroll element.\r\n     * The value can be either `top` or `bottom`.\r\n     */\r\n    this.position = 'bottom';\r\n    this.onScroll = () => {\r\n      const scrollEl = this.scrollEl;\r\n      if (!scrollEl || !this.canStart()) {\r\n        return 1;\r\n      }\r\n      const infiniteHeight = this.el.offsetHeight;\r\n      if (infiniteHeight === 0) {\r\n        // if there is no height of this element then do nothing\r\n        return 2;\r\n      }\r\n      const scrollTop = scrollEl.scrollTop;\r\n      const scrollHeight = scrollEl.scrollHeight;\r\n      const height = scrollEl.offsetHeight;\r\n      const threshold = this.thrPc !== 0 ? (height * this.thrPc) : this.thrPx;\r\n      const distanceFromInfinite = (this.position === 'bottom')\r\n        ? scrollHeight - infiniteHeight - scrollTop - threshold - height\r\n        : scrollTop - infiniteHeight - threshold;\r\n      if (distanceFromInfinite < 0) {\r\n        if (!this.didFire) {\r\n          this.isLoading = true;\r\n          this.didFire = true;\r\n          this.ionInfinite.emit();\r\n          return 3;\r\n        }\r\n      }\r\n      else {\r\n        this.didFire = false;\r\n      }\r\n      return 4;\r\n    };\r\n  }\r\n  thresholdChanged() {\r\n    const val = this.threshold;\r\n    if (val.lastIndexOf('%') > -1) {\r\n      this.thrPx = 0;\r\n      this.thrPc = (parseFloat(val) / 100);\r\n    }\r\n    else {\r\n      this.thrPx = parseFloat(val);\r\n      this.thrPc = 0;\r\n    }\r\n  }\r\n  disabledChanged() {\r\n    const disabled = this.disabled;\r\n    if (disabled) {\r\n      this.isLoading = false;\r\n      this.isBusy = false;\r\n    }\r\n    this.enableScrollEvents(!disabled);\r\n  }\r\n  async connectedCallback() {\r\n    const contentEl = this.el.closest('ion-content');\r\n    if (!contentEl) {\r\n      console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\r\n      return;\r\n    }\r\n    this.scrollEl = await contentEl.getScrollElement();\r\n    this.thresholdChanged();\r\n    this.disabledChanged();\r\n    if (this.position === 'top') {\r\n      writeTask(() => {\r\n        if (this.scrollEl) {\r\n          this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  disconnectedCallback() {\r\n    this.enableScrollEvents(false);\r\n    this.scrollEl = undefined;\r\n  }\r\n  /**\r\n   * Call `complete()` within the `ionInfinite` output event handler when\r\n   * your async operation has completed. For example, the `loading`\r\n   * state is while the app is performing an asynchronous operation,\r\n   * such as receiving more data from an AJAX request to add more items\r\n   * to a data list. Once the data has been received and UI updated, you\r\n   * then call this method to signify that the loading has completed.\r\n   * This method will change the infinite scroll's state from `loading`\r\n   * to `enabled`.\r\n   */\r\n  async complete() {\r\n    const scrollEl = this.scrollEl;\r\n    if (!this.isLoading || !scrollEl) {\r\n      return;\r\n    }\r\n    this.isLoading = false;\r\n    if (this.position === 'top') {\r\n      /**\r\n       * New content is being added at the top, but the scrollTop position stays the same,\r\n       * which causes a scroll jump visually. This algorithm makes sure to prevent this.\r\n       * (Frame 1)\r\n       *    - complete() is called, but the UI hasn't had time to update yet.\r\n       *    - Save the current content dimensions.\r\n       *    - Wait for the next frame using _dom.read, so the UI will be updated.\r\n       * (Frame 2)\r\n       *    - Read the new content dimensions.\r\n       *    - Calculate the height difference and the new scroll position.\r\n       *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\r\n       * (Still frame 2, if I'm correct)\r\n       *    - Change the scroll position (= visually maintain the scroll position).\r\n       *    - Change the state to re-enable the InfiniteScroll.\r\n       *    - This should be after changing the scroll position, or it could\r\n       *    cause the InfiniteScroll to be triggered again immediately.\r\n       * (Frame 3)\r\n       *    Done.\r\n       */\r\n      this.isBusy = true;\r\n      // ******** DOM READ ****************\r\n      // Save the current content dimensions before the UI updates\r\n      const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\r\n      // ******** DOM READ ****************\r\n      requestAnimationFrame(() => {\r\n        readTask(() => {\r\n          // UI has updated, save the new content dimensions\r\n          const scrollHeight = scrollEl.scrollHeight;\r\n          // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\r\n          const newScrollTop = scrollHeight - prev;\r\n          // ******** DOM WRITE ****************\r\n          requestAnimationFrame(() => {\r\n            writeTask(() => {\r\n              scrollEl.scrollTop = newScrollTop;\r\n              this.isBusy = false;\r\n            });\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }\r\n  canStart() {\r\n    return (!this.disabled &&\r\n      !this.isBusy &&\r\n      !!this.scrollEl &&\r\n      !this.isLoading);\r\n  }\r\n  enableScrollEvents(shouldListen) {\r\n    if (this.scrollEl) {\r\n      if (shouldListen) {\r\n        this.scrollEl.addEventListener('scroll', this.onScroll);\r\n      }\r\n      else {\r\n        this.scrollEl.removeEventListener('scroll', this.onScroll);\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const mode = getIonMode(this);\r\n    const disabled = this.disabled;\r\n    return (h(Host, { class: {\r\n        [mode]: true,\r\n        'infinite-scroll-loading': this.isLoading,\r\n        'infinite-scroll-enabled': !disabled\r\n      } }));\r\n  }\r\n  get el() { return getElement(this); }\r\n  static get watchers() { return {\r\n    \"threshold\": [\"thresholdChanged\"],\r\n    \"disabled\": [\"disabledChanged\"]\r\n  }; }\r\n};\r\nInfiniteScroll.style = infiniteScrollCss;\r\n\r\nconst infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\r\n\r\nconst infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\r\n\r\nconst InfiniteScrollContent = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n  }\r\n  componentDidLoad() {\r\n    if (this.loadingSpinner === undefined) {\r\n      const mode = getIonMode(this);\r\n      this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\r\n    }\r\n  }\r\n  render() {\r\n    const mode = getIonMode(this);\r\n    return (h(Host, { class: {\r\n        [mode]: true,\r\n        // Used internally for styling\r\n        [`infinite-scroll-content-${mode}`]: true\r\n      } }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(this.loadingText) })))));\r\n  }\r\n};\r\nInfiniteScrollContent.style = {\r\n  ios: infiniteScrollContentIosCss,\r\n  md: infiniteScrollContentMdCss\r\n};\r\n\r\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\r\n"]},"metadata":{},"sourceType":"module"}