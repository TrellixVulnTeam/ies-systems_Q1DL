{"ast":null,"code":"import { NavigationStart } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { Alert, AlertType } from './alert.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let AlertService = /*#__PURE__*/(() => {\n  class AlertService {\n    constructor(router) {\n      this.router = router;\n      this.subject = new Subject();\n      this.keepAfterRouteChange = false; // clear alert messages on route change unless 'keepAfterRouteChange' flag is true\n\n      this.router.events.subscribe(event => {\n        if (event instanceof NavigationStart) {\n          if (this.keepAfterRouteChange) {\n            // only keep for a single route change\n            this.keepAfterRouteChange = false;\n          } else {\n            // clear alert messages\n            this.clear();\n          }\n        }\n      });\n    } // enable subscribing to alerts observable\n\n\n    onAlert(alertId) {\n      return this.subject.asObservable().pipe(filter(x => x && x.alertId === alertId));\n    } // convenience methods\n\n\n    success(message, alertId) {\n      this.alert(new Alert({\n        message,\n        type: AlertType.Success,\n        alertId\n      }));\n    }\n\n    error(message, alertId) {\n      this.alert(new Alert({\n        message,\n        type: AlertType.Error,\n        alertId\n      }));\n    }\n\n    info(message, alertId) {\n      this.alert(new Alert({\n        message,\n        type: AlertType.Info,\n        alertId\n      }));\n    }\n\n    warn(message, alertId) {\n      this.alert(new Alert({\n        message,\n        type: AlertType.Warning,\n        alertId\n      }));\n    } // main alert method    \n\n\n    alert(alert) {\n      this.keepAfterRouteChange = alert.keepAfterRouteChange;\n      this.subject.next(alert);\n    } // clear alerts\n\n\n    clear(alertId) {\n      this.subject.next(new Alert({\n        alertId\n      }));\n    }\n\n  }\n\n  AlertService.ɵfac = function AlertService_Factory(t) {\n    return new (t || AlertService)(i0.ɵɵinject(i1.Router));\n  };\n\n  AlertService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AlertService,\n    factory: AlertService.ɵfac,\n    providedIn: 'root'\n  });\n  return AlertService;\n})();","map":null,"metadata":{},"sourceType":"module"}